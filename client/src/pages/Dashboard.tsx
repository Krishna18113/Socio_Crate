// client/src/pages/Dashboard.tsx (UPDATED)
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import PostForm from '../components/PostForm';
import PostCard from '../components/PostCard';
import { useEffect, useState } from 'react';
// ðŸ”‘ Import the new getMyPosts function
import { getMyPosts } from '../api/post'; 
// Note: getPosts is no longer needed here

export default function Dashboard() {
Â  const { user, logout } = useAuth()!;
Â  const navigate = useNavigate();
Â  const [posts, setPosts] = useState<any[]>([]);

  // ðŸ”‘ RENAME/UPDATE: Function now fetches ONLY the current user's posts
Â  const fetchUserPosts = async () => {
Â  Â  try {
        // Use the user-specific API call
Â  Â  Â  Â  const data = await getMyPosts();
Â  Â  Â  Â  setPosts(data);
Â  Â  } catch (error) {
        // Handle error, e.g., if token expires
        console.error("Failed to fetch user posts:", error);
    }
Â  };

Â  useEffect(() => {
Â  Â  fetchUserPosts();
Â  }, []);

Â  return (
Â  Â  <div className="max-w-2xl mx-auto mt-10">
Â  Â  Â  {/* Navbar */}
Â  Â  Â  <div className="flex justify-between items-center mb-6 p-4 border-b">
Â  Â  Â  Â  <div className="text-xl font-bold">ðŸ§  SocioCrate</div>
Â  Â  Â  Â  <div className="space-x-4">
Â  Â  Â  Â  Â  <button onClick={() => navigate('/feed')} className="text-blue-500">Feed</button>
Â  Â  Â  Â  Â  <button onClick={() => navigate(`/users/${user?.id}`)} className="text-blue-500">My Profile</button>
Â  Â  Â  Â  Â  <button onClick={() => navigate('/ai/resume-analyzer')} className="text-blue-500">Resume</button>
Â  Â  Â  Â  Â  <button onClick={() => { logout(); navigate('/login'); }} className="text-red-500">Logout</button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* PostForm */}
Â  Â  Â  {/* ðŸ”‘ onPostAdded now calls the user-specific fetch function */}
Â  Â  Â  <PostForm onPostAdded={fetchUserPosts} />

Â  Â  Â  {/* Post List */}
Â  Â  Â  <div className="space-y-4 mt-6">
Â  Â  Â  Â  {posts && posts.length > 0 ? (
Â  Â  Â  Â  Â  posts.map((post) => (
Â  Â  Â  Â  Â  Â  <PostCard 
                key={post.id} 
                post={post} 
                // ðŸ”‘ onUpdated handles edit AND delete, refreshing the user's list
                onUpdated={fetchUserPosts} 
            />
Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  ) : (
            // Updated empty state message
Â  Â  Â  Â  Â  <p className="text-center text-gray-500 p-4 border rounded-lg bg-gray-50">You haven't posted anything yet. Share your thoughts!</p>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}


